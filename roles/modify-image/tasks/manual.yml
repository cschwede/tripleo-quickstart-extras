---
- name: Set abs path for image
  command: echo "{{ image_to_modify }}"
  register: image_to_modify_abs_path
  changed_when: false

- name: Create a temp dir for extracting images
  command: mktemp -d
  register: mktemp_command
  changed_when: true

- name: Set names for images and temp dir
  set_fact:
    mount_tempdir: "{{ mktemp_command.stdout }}"

- name: Ensure qemu-img is installed
  package:
    name: qemu-img
    state: present
  become: true

- when: not initramfs_image|bool
  block:

    - name: Set names for images and temp dir
      set_fact:
        image_to_modify_qcow: "{{ image_to_modify_abs_path.stdout }}"
        image_to_modify_raw: "{{ image_to_modify_abs_path.stdout|replace('qcow2', 'raw') }}"

    - name: Convert image
      shell: >
        set -eo pipefail;
        qemu-img convert -f qcow2 -O raw {{ image_to_modify_qcow }} {{ image_to_modify_raw }};
        rm -rf "{{ image_to_modify_qcow }}";

    - name: Mount image
      shell: |
        set -e
        modprobe nbd
        IMAGE_FILE={{ image_to_modify_raw }}
        MOUNT_DIR={{ mount_tempdir }}
        NBD_DEVICE=/dev/nbd0

        mount_volume () {
            if [ -b "$1" ]; then
                if [ ! -d $2 ]; then
                    mkdir $2
                fi
                mount $1 $2
            fi
        }

        set -x

        qemu-nbd --format raw --connect $NBD_DEVICE $IMAGE_FILE

        # search for the vg volume group, this is automatic in some environments
        vgscan
        # refresh for when this script is called with different values of $NBD_DEVICE
        vgchange --refresh

        # activate new logical volumes, this is automatic in some environments
        vgchange -ay

        if [ -b "${NBD_DEVICE}p3" ]; then
            # 3 partitions in the image, so assume the first 2 are boot partitions
            if [ -b "/dev/mapper/vg-lv_root" ]; then
                # a whole-disk overcloud with lvm volumes
                # for example, overcloud-hardened-uefi-full.qcow2
                mount /dev/mapper/vg-lv_root $MOUNT_DIR
                mount_volume /dev/mapper/vg-lv_var $MOUNT_DIR/var
                mount_volume /dev/mapper/vg-lv_log $MOUNT_DIR/var/log
                mount_volume /dev/mapper/vg-lv_audit $MOUNT_DIR/var/log/audit
                mount_volume /dev/mapper/vg-lv_home $MOUNT_DIR/home
                mount_volume /dev/mapper/vg-lv_tmp $MOUNT_DIR/tmp
                mount_volume /dev/mapper/vg-lv_srv $MOUNT_DIR/srv
            else
                # a whole-disk overcloud with a single root partition
                # for example, overcloud-hardened-full.qcow2
                mount ${NBD_DEVICE}p3 $MOUNT_DIR
            fi
        else
            # a partition image
            # for example, overcloud-full.qcow2
            if [ -b "${NBD_DEVICE}p1" ]; then
                mount ${NBD_DEVICE}p1 $MOUNT_DIR
            else
                mount ${NBD_DEVICE} $MOUNT_DIR
            fi
        fi
      become: true
      register: mount_result
      ignore_errors: true

    - name: Debug image mount
      debug:
        msg:
          stdout: "{{ mount_result.stdout }}"
          stderr: "{{ mount_result.stderr }}"
      failed_when: mount_result.rc != 0

- name: Extract initramfs image
  shell: set -o pipefail && gunzip -c {{ image_to_modify_abs_path.stdout }} | cpio -i
  become: true
  args:
    chdir: "{{ mount_tempdir }}"
  when: initramfs_image|bool

- become: true
  block:

    - name: Upload files to image
      shell: >
        cp {{ item.src }} {{ mount_tempdir }}/{{ item.dest }};
      with_items: "{{ modify_image_upload_files }}"

    - name: Check if /etc/resolv.conf exists
      stat:
        path: "{{ mount_tempdir }}/etc/resolv.conf"
      register: resolv_stat_result

    - name: Create {{ mount_tempdir }}/etc/resolv.conf if it does not exist
      file:
        path: "{{ mount_tempdir }}/etc/resolv.conf"
        state: touch
      when: not resolv_stat_result.stat.exists

    - name: Run script on image
      shell: >
        chmod 775 {{ mount_tempdir }};
        mount -o bind /dev {{ mount_tempdir }}/dev/;
        mv {{ mount_tempdir }}/etc/resolv.conf{,_};
        echo -e "nameserver 8.8.8.8\nnameserver 8.8.4.4" > {{ mount_tempdir }}/etc/resolv.conf;
        cp {{ modify_script }} {{ mount_tempdir }}/tmp/{{ modify_script|basename }};
        {% if initramfs_image|bool %}sed -i "s/sudo //g" {{ mount_tempdir }}/tmp/{{ modify_script|basename }};{% endif %}
        set -o pipefail && chroot {{ mount_tempdir }} /bin/bash /tmp/{{ modify_script|basename }} 2>&1
        {{ timestamper_cmd }} > {{ working_dir }}/{{ modify_script|basename }}.$(date +%s).log;
        mv -f {{ mount_tempdir }}/etc/resolv.conf{_,};
        umount {{ mount_tempdir }}/dev/;

    - name: Extract files from image
      shell: cp {{ mount_tempdir }}/{{ item }} {{ modify_image_working_dir }}/;
      with_items: "{{ modify_image_extract_list }}"
      ignore_errors: true

    - name: Close initramfs image
      shell: >
        pushd {{ mount_tempdir }};
        find . -print | cpio -o -H newc | gzip > {{ image_to_modify_abs_path.stdout }};
        popd;
        rm -rf "{{ mount_tempdir }}";
      when: initramfs_image|bool

    - name: Close qcow2 image
      shell: |
        chroot {{ mount_tempdir }} setfiles /etc/selinux/targeted/contexts/files/file_contexts /

        MOUNT_DIR={{ mount_tempdir }}
        NBD_DEVICE=/dev/nbd0

        unmount_volume () {
            if mountpoint "$1"; then
                umount $1
            fi
        }

        remove_device () {
            if [ -b "/dev/mapper/$1" ]; then
                dmsetup remove $1
            fi
        }

        if mountpoint "$MOUNT_DIR"; then
            unmount_volume $MOUNT_DIR/var/log/audit
            unmount_volume $MOUNT_DIR/var/log
            unmount_volume $MOUNT_DIR/var
            unmount_volume $MOUNT_DIR/home
            unmount_volume $MOUNT_DIR/tmp
            unmount_volume $MOUNT_DIR/srv
            umount $MOUNT_DIR
        fi

        qemu-nbd --disconnect $NBD_DEVICE
        vgchange --refresh vg || true

        remove_device vg-lv_root
        remove_device vg-lv_var
        remove_device vg-lv_log
        remove_device vg-lv_audit
        remove_device vg-lv_home
        remove_device vg-lv_tmp
        remove_device vg-lv_srv

        qemu-img convert -c -f raw -O qcow2 {{ image_to_modify_raw }} {{ image_to_modify_qcow }}
        rm -rf "{{ image_to_modify_raw }}"
        rm -rf "{{ mount_tempdir }}"
        chown -R {{ undercloud_user }}: /home/{{ undercloud_user }}/
      when: not initramfs_image|bool
